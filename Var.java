public class Var {
    // 메인메소드에 선언된 변수들은 프로그램과 생명주기 같이함
    // 메인 메소드가 종료된다? -> 프로그램도 종료
    // stack 은 메소드의 지역변수 , 잠시 사용되고 필요없어지는 뎅터
    // Var v -> 메인 메소드 전역변수-> 힙
    // 힙 -> new 연산자를 통해 생성된 데이터가 저장되는 공간
    // 메소드 자체의 공간 -> 메소드실행에 필요한 작업
    public static void main(String[] args) {
        //자바의 데이터 타입
        // 기본형 or 참조형
        // 기본형 -> 숫자, 문자...
        // String -> 참조형
        // int i =10;
        // String s="10"->사실 객체(참조형 데이터)를 생성
        // 리터럴 = 소스코드에서 값을 표현해놓은 것을 모두 리터럴이라고 함
        // double d = 2.0; boolean b= true; char c= 'c'; 등등...
        // 표현식 = 리터럴 또는 다른 변수들을 이용해서 연산자를 사용한 작업을 거친 후 생성
        // mid = (hi + lo)/2 했던게 다 표현식
        // 표현식도 수행 결과로 특정 데이터 타입을 가질 수 있다.
        int i=10;
        int i2=10-5+7;

        //수식의 결과가 boolean 일때는 조건문이나 반복문에 필요한 조건식에 사용
        boolean b=5>10;
        // if(b) = if(5>10) = if(false)

        // 수식의 결과가 어떤 타입
        // 다양한 타입을 가지고 수식을 작성하게 되면 타입 변환
        // 실수 + 정수 = 실수
        // 숫자는 그 숫자의 정밀도를 잃어버리지 않는 범위 내에서 데이터 타입 자동 변환
        // 정밀도 => 소수점 실수를 얼마나 자세하게 표현할 것인지
        // 2/3=0.66666666666666~~~인데 어느 순간 반올림해서 자름
        // 실수를 강제로 정수(int)로 바꾸면 정밀도를 잃어버림(=소수 버림)
        // int (32비트)
        // long (64비트) => int 보다 더 긴 자릿수의 정수를 표현할 때 사용
        // short (16비트) 정수, byte(8비트) 정수
        // char (16비트) 정수 -> 문자로 표현하겠다.
        // float (32비트) 실수, double (64비트) 실수

        //자바의 명령문
        // 선언문 -> 변수를 선언하는 문장
        // 대입문 -> 변수에 값을 대입
        // 조건문 -> 프로그램의 실행 흐름을 바꿀 수 있게 해줌
        // 반복문 -> 특정 조건이 만족되는 동안 해당 블록의 명령문을 계속해서 반복 실행
        if( 15 > 10 ){
            // 조건을 만족하면 실행할 명령문의 범위를 지정 -> 블록(중괄호)
            int inner =10;
        }
        // 축약 표현
        // int i3;
        // i3=10;
        int i3=10; // 초기화 선언

        i+=2; // i=i+2;
        // 좌항에 대해 우항을 연산에 적용한 후에 좌항에 대입
        i++; // i=i+1; 묵시적인 대입

        /*
            for( <초기화식> ; <boolean 식> ; <증감식> ){
                <명령문>
            }
            while ( <boolean 식> ){
                <명령문>
                <증감식> // 반복문 조건에 다가가기 위한 장치
            }

            switch 에서 실수는 근사값으로 표현되서 사용 불가
            boolean 도 사용 불가
            switch ( 변수) {
                case
            }
         */
    }
    public static void a(int a){
        Var v = new Var();
        // v는 스택 -> heap
        // 힙에는 객체 자체가 들어있고 stack이 가리키는 주소
    }


}
